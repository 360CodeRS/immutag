"use client";

import { ParallaxProvider, Parallax } from "react-scroll-parallax";
import { useRef, useState } from "react";
import {
  motion,
  useScroll,
  useTransform,
  useSpring,
  useMotionValueEvent,
} from "framer-motion";
import Lottie from "lottie-react";
import droneAnimation from "@/public/animations/drone.json";

const slides = [
  {
    title: "Completed Milestones",
    gradient: "from-cyan-900 via-blue-900 to-indigo-900",
    accent: "cyan",
    glowColor: "cyan-400",
    items: [
      "LOX Network foundation established",
      "Initial blockchain integration",
      "Partnerships with manufacturers and insurers",
      "Proof-of-concept deployment",
    ],
  },
  {
    title: "Q3/Q4 2025",
    gradient: "from-blue-900 via-indigo-900 to-purple-900",
    accent: "blue",
    glowColor: "blue-400",
    items: [
      "Immutag rebranding complete",
      "Token swap launch",
      "Beta testing web & mobile apps",
      "Device support expansion",
    ],
  },
  {
    title: "Q1/Q2 2026",
    gradient: "from-purple-900 via-violet-900 to-fuchsia-900",
    accent: "purple",
    glowColor: "purple-400",
    items: [
      "Official app launch",
      "Global partnerships",
      "Launch of developer APIs",
      "Law enforcement + insurance integrations",
    ],
  },
  {
    title: "Future Goals",
    gradient: "from-indigo-900 via-purple-900 to-cyan-900",
    accent: "indigo",
    glowColor: "indigo-400",
    items: [
      "AI theft detection",
      "Luxury goods/collectibles expansion",
      "Global DAO governance launch",
      "Continuous improvement via feedback",
    ],
  },
];

export default function RoadmapWithHero() {
  const roadmapRef = useRef<HTMLElement>(null);
  const [currentIndex, setCurrentIndex] = useState(0);

  const { scrollYProgress } = useScroll({
    target: roadmapRef,
    offset: ["start start", "end end"],
  });

  const slideIndex = useTransform(
    scrollYProgress,
    [0, 1],
    [0, slides.length - 0.001],
    { clamp: true }
  );

  useMotionValueEvent(slideIndex, "change", (val) => {
    const i = Math.floor(val);
    if (i !== currentIndex) setCurrentIndex(i);
  });

  const droneY = useSpring(
    useTransform(scrollYProgress, [0, 1], ["0%", "-20%"]),
    { stiffness: 100, damping: 20 }
  );

  return (
    <div className="relative bg-black text-white">
      {/* Global ambient grid */}
      <div className="fixed inset-0 z-0 pointer-events-none">
        <div className="absolute inset-0 opacity-5 bg-[radial-gradient(circle,rgba(255,255,255,0.05)_1px,transparent_1px)] bg-[size:30px_30px]" />
      </div>

      {/* Hero Intro */}
      <section className="relative py-24 text-center z-10">
        <h1 className="text-4xl md:text-6xl font-bold bg-gradient-to-r from-white via-cyan-400 to-blue-400 bg-clip-text text-transparent">
          Roadmap
        </h1>
        <p className="text-gray-400 mt-4 max-w-2xl mx-auto">
          Explore our progress and upcoming goals on the blockchain frontier.
        </p>
      </section>

      <section
        ref={roadmapRef}
        className="relative z-10"
        style={{ minHeight: `${slides.length * 100}vh` }}
      >
        <ParallaxProvider>
          {slides.map((slide, idx) => (
            <Parallax key={idx} translateY={[-10, 10]}>
              <div
                className={`absolute inset-0 h-screen bg-gradient-to-br ${slide.gradient}`}
                style={{ top: `${idx * 100}vh` }}
              >
                {/* Hex grid */}
                <div className="absolute inset-0 opacity-5">
                  <svg className="w-full h-full">
                    <defs>
                      <pattern
                        id={`hex-${idx}`}
                        width="100"
                        height="86.6"
                        patternUnits="userSpaceOnUse"
                      >
                        <polygon
                          points="50,0 100,25 100,75 50,100 0,75 0,25"
                          stroke="#00f5ff"
                          strokeWidth="0.3"
                          fill="none"
                          opacity="0.05"
                        />
                      </pattern>
                    </defs>
                    <rect
                      width="100%"
                      height="100%"
                      fill={`url(#hex-${idx})`}
                    />
                  </svg>
                </div>

                {/* Radial glow */}
                <div className="absolute inset-0 bg-gradient-radial from-white/5 via-transparent to-transparent pointer-events-none" />
              </div>
            </Parallax>
          ))}

          {/* Sticky drone + card content */}
          <div className="sticky top-0 h-screen flex flex-col items-center justify-center z-20">
            {/* Drone */}
            <motion.div
              className="relative w-32 h-32 sm:w-36 sm:h-36 pointer-events-none"
              style={{ y: droneY }}
            >
              <Lottie animationData={droneAnimation} loop autoplay />
              <motion.div
                className="absolute inset-0 border-2 border-cyan-400/30 rounded-full"
                animate={{ rotate: 360 }}
                transition={{ duration: 10, repeat: Infinity, ease: "linear" }}
              />
              <motion.div
                className="absolute inset-2 border border-blue-400/20 rounded-full"
                animate={{ rotate: -360 }}
                transition={{ duration: 15, repeat: Infinity, ease: "linear" }}
              />
              <div className="absolute inset-0 bg-cyan-400/20 rounded-full blur-2xl animate-pulse" />

              {/* Square brackets */}
              <div className="absolute -top-2 -left-2 w-4 h-4 border-l-2 border-t-2 border-cyan-400/60" />
              <div className="absolute -top-2 -right-2 w-4 h-4 border-r-2 border-t-2 border-cyan-400/60" />
              <div className="absolute -bottom-2 -left-2 w-4 h-4 border-l-2 border-b-2 border-cyan-400/60" />
              <div className="absolute -bottom-2 -right-2 w-4 h-4 border-r-2 border-b-2 border-cyan-400/60" />
            </motion.div>

            {/* Floating white triangle */}
            <motion.div
              className="absolute top-12 right-12 w-16 h-16 border border-white/10"
              style={{ clipPath: "polygon(50% 0%, 0% 100%, 100% 100%)" }}
              animate={{
                y: [0, -10, 0],
                rotate: [0, 360],
                opacity: [0.3, 0.5, 0.3],
              }}
              transition={{ duration: 20, repeat: Infinity, ease: "easeInOut" }}
            />

            {/* Beam particles */}
            <div className="relative -mt-4 h-48 w-0">
              <div className="absolute left-1/2 top-0 transform -translate-x-1/2 w-0 h-0 border-l-[60px] border-r-[60px] border-b-[180px] border-l-transparent border-r-transparent border-b-cyan-400/30 blur-xl" />
              {Array.from({ length: 6 }).map((_, i) => (
                <motion.div
                  key={i}
                  className="absolute w-1 h-1 bg-cyan-300 rounded-full"
                  style={{ top: `${i * 20}px`, left: "-1px" }}
                  animate={{
                    y: [0, 30, 0],
                    x: [-5, 5, -5],
                    opacity: [1, 0.3, 1],
                  }}
                  transition={{ duration: 2, repeat: Infinity, delay: i * 0.2 }}
                />
              ))}
            </div>

            {/* Futuristic Card */}
            <motion.div
              key={currentIndex}
              className="mt-4 w-[90vw] sm:max-w-lg bg-black/60 backdrop-blur-3xl rounded-3xl border border-cyan-400/40 p-6 sm:p-8 shadow-2xl ring-2 ring-cyan-400/30 text-center relative overflow-hidden"
              initial={{ opacity: 0, y: 20, scale: 0.9 }}
              animate={{ opacity: 1, y: 0, scale: 1 }}
              exit={{ opacity: 0, y: -20, scale: 0.9 }}
              transition={{ duration: 0.6, ease: "easeOut" }}
              style={{
                boxShadow: `
      0 0 60px ${
        slides[currentIndex].glowColor === "cyan-400"
          ? "#00f5ff"
          : slides[currentIndex].glowColor === "blue-400"
          ? "#3b82f6"
          : slides[currentIndex].glowColor === "purple-400"
          ? "#a855f7"
          : "#6366f1"
      }40,
      inset 0 1px 0 rgba(255, 255, 255, 0.1)
    `,
              }}
            >
              <div className="pointer-events-auto">
                {/* Holographic Overlay */}
                <div className="absolute inset-0 bg-gradient-to-br from-cyan-500/10 via-transparent to-purple-500/10 rounded-3xl" />

                {/* Animated Border */}
                <motion.div
                  className="absolute inset-0 rounded-3xl"
                  style={{
                    background: `conic-gradient(from 0deg, transparent, ${
                      slides[currentIndex].glowColor === "cyan-400"
                        ? "#00f5ff"
                        : slides[currentIndex].glowColor === "blue-400"
                        ? "#3b82f6"
                        : slides[currentIndex].glowColor === "purple-400"
                        ? "#a855f7"
                        : "#6366f1"
                    }40, transparent)`,
                  }}
                  animate={{ rotate: 360 }}
                  transition={{ duration: 8, repeat: Infinity, ease: "linear" }}
                />
                <div className="absolute inset-[1px] bg-black/60 backdrop-blur-3xl rounded-3xl" />

                {/* Pattern grid */}
                <div className="absolute inset-0 opacity-5">
                  <div
                    className="w-full h-full"
                    style={{
                      backgroundImage: `
            radial-gradient(circle at 25% 25%, rgba(0, 245, 255, 0.2) 1px, transparent 1px),
            radial-gradient(circle at 75% 75%, rgba(99, 102, 241, 0.2) 1px, transparent 1px)
          `,
                      backgroundSize: "40px 40px",
                    }}
                  />
                </div>

                {/* Progress bar */}
                <div className="absolute top-0 left-0 right-0 h-1 bg-white/10 rounded-t-3xl overflow-hidden">
                  <motion.div
                    className="h-full bg-gradient-to-r from-cyan-400 via-blue-400 to-indigo-400"
                    initial={{ width: "0%" }}
                    animate={{
                      width: `${((currentIndex + 1) / slides.length) * 100}%`,
                    }}
                    transition={{ duration: 0.8, ease: "easeOut" }}
                  />
                </div>

                {/* Corner tech accents */}
                <div className="absolute top-3 right-3 flex gap-1">
                  <div className="w-2 h-2 bg-cyan-400/60 rounded-full animate-pulse" />
                  <div
                    className="w-2 h-2 bg-blue-400/60 rounded-full animate-pulse"
                    style={{ animationDelay: "0.5s" }}
                  />
                </div>
                <div className="absolute bottom-3 left-3 w-6 h-6 border border-cyan-400/30 transform rotate-45" />

                {/* Content */}
                <div className="relative z-10">
                  <h2
                    className={`text-2xl sm:text-3xl font-bold mb-6 bg-gradient-to-r ${
                      slides[currentIndex].accent === "cyan"
                        ? "from-cyan-400 to-blue-400"
                        : slides[currentIndex].accent === "blue"
                        ? "from-blue-400 to-purple-400"
                        : slides[currentIndex].accent === "purple"
                        ? "from-purple-400 to-fuchsia-400"
                        : "from-indigo-400 to-cyan-400"
                    } bg-clip-text text-transparent drop-shadow-lg`}
                  >
                    {slides[currentIndex].title}
                  </h2>

                  <ul className="space-y-4 text-gray-100 text-sm sm:text-base text-left leading-relaxed">
                    {slides[currentIndex].items.map((item, i) => (
                      <motion.li
                        key={i}
                        className="flex items-start gap-4 group"
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ delay: i * 0.1, duration: 0.5 }}
                      >
                        <div className="relative mt-2 flex-shrink-0">
                          <div
                            className={`w-2 h-2 rounded-full ${
                              slides[currentIndex].accent === "cyan"
                                ? "bg-cyan-400"
                                : slides[currentIndex].accent === "blue"
                                ? "bg-blue-400"
                                : slides[currentIndex].accent === "purple"
                                ? "bg-purple-400"
                                : "bg-indigo-400"
                            }`}
                          />
                          <div
                            className={`absolute inset-0 w-2 h-2 rounded-full ${
                              slides[currentIndex].accent === "cyan"
                                ? "bg-cyan-400"
                                : slides[currentIndex].accent === "blue"
                                ? "bg-blue-400"
                                : slides[currentIndex].accent === "purple"
                                ? "bg-purple-400"
                                : "bg-indigo-400"
                            } animate-ping opacity-75`}
                          />
                        </div>
                        <span className="group-hover:text-white transition-colors duration-300 relative">
                          {item}
                          <div className="absolute bottom-0 left-0 w-0 h-px bg-cyan-400 group-hover:w-full transition-all duration-300" />
                        </span>
                      </motion.li>
                    ))}
                  </ul>
                </div>
              </div>
            </motion.div>
          </div>
        </ParallaxProvider>
      </section>
    </div>
  );
}
